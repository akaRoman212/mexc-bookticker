# Generated by protoc for PushDataV3ApiWrapper.proto
# This is a manual implementation based on the proto definition

import struct
from typing import Optional
from PublicAggreDealsV3Api_pb2 import PublicAggreDealsV3Api
from PublicAggreBookTickerV3Api_pb2 import PublicAggreBookTickerV3Api

class PushDataV3ApiWrapper:
    def __init__(self):
        self.channel: str = ""
        self.symbol: Optional[str] = None
        self.symbolId: Optional[str] = None
        self.createTime: Optional[int] = None
        self.sendTime: Optional[int] = None
        self.publicAggreDeals: Optional[PublicAggreDealsV3Api] = None
        self.publicAggreBookTicker: Optional[PublicAggreBookTickerV3Api] = None
    
    def ParseFromString(self, data: bytes):
        """Parse protobuf data into this object"""
        pos = 0
        while pos < len(data):
            # Read field header (varint)
            field_num, wire_type, pos = self._read_field_header(data, pos)
            
            if field_num == 1:  # channel
                self.channel, pos = self._read_string(data, pos)
            elif field_num == 3:  # symbol
                self.symbol, pos = self._read_string(data, pos)
            elif field_num == 4:  # symbolId
                self.symbolId, pos = self._read_string(data, pos)
            elif field_num == 5:  # createTime
                self.createTime, pos = self._read_varint(data, pos)
            elif field_num == 6:  # sendTime
                self.sendTime, pos = self._read_varint(data, pos)
            elif field_num == 314:  # publicAggreDeals
                self.publicAggreDeals = PublicAggreDealsV3Api()
                deal_data, pos = self._read_bytes(data, pos)
                self.publicAggreDeals.ParseFromString(deal_data)
            elif field_num == 315:  # publicAggreBookTicker
                self.publicAggreBookTicker = PublicAggreBookTickerV3Api()
                ticker_data, pos = self._read_bytes(data, pos)
                self.publicAggreBookTicker.ParseFromString(ticker_data)
            else:
                # Skip unknown field
                pos = self._skip_field(data, pos, wire_type)
    
    def _read_field_header(self, data: bytes, pos: int):
        """Read protobuf field header"""
        field_num, pos = self._read_varint(data, pos)
        wire_type = field_num & 0x7
        field_num >>= 3
        return field_num, wire_type, pos
    
    def _read_varint(self, data: bytes, pos: int):
        """Read protobuf varint"""
        result = 0
        shift = 0
        while pos < len(data):
            byte = data[pos]
            pos += 1
            result |= (byte & 0x7F) << shift
            if (byte & 0x80) == 0:
                break
            shift += 7
        return result, pos
    
    def _read_string(self, data: bytes, pos: int):
        """Read protobuf string"""
        length, pos = self._read_varint(data, pos)
        if pos + length > len(data):
            return "", pos
        string_data = data[pos:pos + length]
        pos += length
        try:
            return string_data.decode('utf-8'), pos
        except:
            return "", pos
    
    def _read_bytes(self, data: bytes, pos: int):
        """Read protobuf bytes"""
        length, pos = self._read_varint(data, pos)
        if pos + length > len(data):
            return b"", pos
        bytes_data = data[pos:pos + length]
        pos += length
        return bytes_data, pos
    
    def _skip_field(self, data: bytes, pos: int, wire_type: int):
        """Skip unknown field"""
        if wire_type == 0:  # varint
            _, pos = self._read_varint(data, pos)
        elif wire_type == 2:  # string/bytes
            length, pos = self._read_varint(data, pos)
            pos += length
        elif wire_type == 1:  # 64-bit
            pos += 8
        elif wire_type == 5:  # 32-bit
            pos += 4
        return pos

